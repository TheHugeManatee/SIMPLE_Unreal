// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_POINT_SIMPLE_MSGS_H_
#define FLATBUFFERS_GENERATED_POINT_SIMPLE_MSGS_H_

#include "flatbuffers/flatbuffers.h"

namespace simple_msgs {

struct PointFbs;

struct PointFbs FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_X = 4,
    VT_Y = 6,
    VT_Z = 8
  };
  double x() const {
    return GetField<double>(VT_X, 0.0);
  }
  double y() const {
    return GetField<double>(VT_Y, 0.0);
  }
  double z() const {
    return GetField<double>(VT_Z, 0.0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_X) &&
           VerifyField<double>(verifier, VT_Y) &&
           VerifyField<double>(verifier, VT_Z) &&
           verifier.EndTable();
  }
};

struct PointFbsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_x(double x) {
    fbb_.AddElement<double>(PointFbs::VT_X, x, 0.0);
  }
  void add_y(double y) {
    fbb_.AddElement<double>(PointFbs::VT_Y, y, 0.0);
  }
  void add_z(double z) {
    fbb_.AddElement<double>(PointFbs::VT_Z, z, 0.0);
  }
  explicit PointFbsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PointFbsBuilder &operator=(const PointFbsBuilder &);
  flatbuffers::Offset<PointFbs> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PointFbs>(end);
    return o;
  }
};

inline flatbuffers::Offset<PointFbs> CreatePointFbs(
    flatbuffers::FlatBufferBuilder &_fbb,
    double x = 0.0,
    double y = 0.0,
    double z = 0.0) {
  PointFbsBuilder builder_(_fbb);
  builder_.add_z(z);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

inline const simple_msgs::PointFbs *GetPointFbs(const void *buf) {
  return flatbuffers::GetRoot<simple_msgs::PointFbs>(buf);
}

inline const simple_msgs::PointFbs *GetSizePrefixedPointFbs(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<simple_msgs::PointFbs>(buf);
}

inline const char *PointFbsIdentifier() {
  return "POIT";
}

inline bool PointFbsBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, PointFbsIdentifier());
}

inline bool VerifyPointFbsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<simple_msgs::PointFbs>(PointFbsIdentifier());
}

inline bool VerifySizePrefixedPointFbsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<simple_msgs::PointFbs>(PointFbsIdentifier());
}

inline void FinishPointFbsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<simple_msgs::PointFbs> root) {
  fbb.Finish(root, PointFbsIdentifier());
}

inline void FinishSizePrefixedPointFbsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<simple_msgs::PointFbs> root) {
  fbb.FinishSizePrefixed(root, PointFbsIdentifier());
}

}  // namespace simple_msgs

#endif  // FLATBUFFERS_GENERATED_POINT_SIMPLE_MSGS_H_
